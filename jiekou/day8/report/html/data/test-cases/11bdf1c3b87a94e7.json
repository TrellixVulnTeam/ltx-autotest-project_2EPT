{
  "uid" : "11bdf1c3b87a94e7",
  "name" : "test_No_Decorator[bull-123456-登录成功]",
  "fullName" : "allure报告相关的装饰器.Test_login#test_No_Decorator",
  "historyId" : "b74b6577d664d4fa19df160b7573169b",
  "time" : {
    "start" : 1603598568362,
    "stop" : 1603598568405,
    "duration" : 43
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <allure报告相关的装饰器.Test_login object at 0x0000028E270421C8>, accounts = 'bull', pwd = '123456', exp = '登录成功'\n\n    @pytest.mark.parametrize('accounts,pwd,exp', [('bull', '123456', '登录成功')])\n    def test_No_Decorator(self,accounts, pwd, exp):\n        # 登录接口的url\n        url = self.ip + '/mtx/index.php?s=/index/user/login.html'\n        headers = {'X-Requested-With': 'XMLHttpRequest'}\n        data = {'accounts': accounts, 'pwd': pwd}\n        r = requests.post(url=url, data=data, headers=headers)\n        # print(r.text)\n>       res = r.json()\n\nallure报告相关的装饰器.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\programdata\\anaconda3\\envs\\20200823\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\nd:\\programdata\\anaconda3\\envs\\20200823\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nd:\\programdata\\anaconda3\\envs\\20200823\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000028E2610DE88>\ns = '<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\\n<html><head>\\n<title>404 Not Found</title>\\n</head><body>\\n<h1>No...er.</p>\\n<hr>\\n<address>Apache/2.4.23 (Win64) PHP/7.0.10 Server at 121.42.15.146 Port 9090</address>\\n</body></html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nd:\\programdata\\anaconda3\\envs\\20200823\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "allure报告相关的装饰器"
  }, {
    "name" : "subSuite",
    "value" : "Test_login"
  }, {
    "name" : "host",
    "value" : "LAPTOP-LIVE0232"
  }, {
    "name" : "thread",
    "value" : "10796-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "allure报告相关的装饰器"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "accounts",
    "value" : "'bull'"
  }, {
    "name" : "exp",
    "value" : "'登录成功'"
  }, {
    "name" : "pwd",
    "value" : "'123456'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "11bdf1c3b87a94e7.json",
  "parameterValues" : [ "'bull'", "'登录成功'", "'123456'" ]
}